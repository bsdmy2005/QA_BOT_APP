doctype html
html(lang='en')
  head
    style.
      :root {
        --primary-blue: #0078D4;
        --light-blue: #E5F1FB;
        --white: #FFFFFF;
        --gray-100: #F3F4F6;
        --gray-200: #E5E7EB;
        --gray-700: #374151;
        --success-green: #059669;
      }
      
      body {
        margin: 0;
        padding: 20px;
        background-color: var(--white);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        color: var(--gray-700);
      }
      
      .question-container {
        max-width: 100%;
        margin: 0 auto;
        background: var(--white);
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }
      
      .question-title {
        font-size: 24px;
        font-weight: 600;
        color: var(--gray-700);
        margin-bottom: 16px;
        padding-bottom: 12px;
        border-bottom: 2px solid var(--gray-200);
      }
      
      .question-meta {
        display: flex;
        gap: 16px;
        color: var(--gray-700);
        font-size: 14px;
        margin-bottom: 24px;
        align-items: center;
      }
      
      .question-meta-item {
        display: flex;
        align-items: center;
        gap: 6px;
      }
      
      .question-content {
        color: var(--gray-700);
        line-height: 1.6;
        font-size: 16px;
        margin-bottom: 32px;
      }
      
      .question-content img {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
        margin: 16px 0;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      
      .question-content p {
        margin: 0 0 16px 0;
      }
      
      .question-content ul, .question-content ol {
        margin: 0 0 16px 0;
        padding-left: 24px;
      }
      
      .question-content li {
        margin-bottom: 8px;
      }
      
      .question-content a {
        color: var(--primary-blue);
        text-decoration: none;
      }
      
      .question-content a:hover {
        text-decoration: underline;
      }
      
      .answers-section {
        margin-top: 32px;
        border-top: 2px solid var(--gray-200);
        padding-top: 24px;
      }
      
      .answers-title {
        font-size: 20px;
        font-weight: 600;
        margin-bottom: 16px;
      }
      
      .answer-list {
        display: flex;
        flex-direction: column;
        gap: 16px;
        margin-bottom: 24px;
      }
      
      .answer-item {
        background: var(--gray-100);
        border-radius: 8px;
        padding: 16px;
      }
      
      .answer-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
        font-size: 14px;
      }
      
      .answer-author {
        font-weight: 500;
      }
      
      .answer-date {
        color: var(--gray-700);
      }
      
      .answer-content {
        line-height: 1.5;
      }
      
      .answer-form {
        background: var(--light-blue);
        border-radius: 8px;
        padding: 16px;
      }
      
      .answer-input {
        width: 100%;
        min-height: 100px;
        padding: 12px;
        border: 2px solid var(--gray-200);
        border-radius: 6px;
        margin-bottom: 12px;
        font-family: inherit;
        font-size: 14px;
        resize: vertical;
      }
      
      .answer-input:focus {
        outline: none;
        border-color: var(--primary-blue);
        box-shadow: 0 0 0 3px rgba(0, 120, 212, 0.1);
      }
      
      .submit-button {
        background: var(--primary-blue);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
      }
      
      .submit-button:hover {
        background: #006CBE;
      }
      
      .accepted-answer {
        border-left: 4px solid var(--success-green);
      }
      
      .accept-button {
        background: var(--success-green);
        color: white;
        border: none;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        cursor: pointer;
      }

    title Question Details
    link(rel='stylesheet', type='text/css', href='/styles/msteams-16.css')
    script(src="https://unpkg.com/@microsoft/teams-js@1.3.7/dist/MicrosoftTeams.min.js" integrity="sha384-glExfvkpce98dO2oN+diZ/Luv/5qrZJiOvWCeR8ng/ZxlhpvBgHKeVFRURrh+NEC" crossorigin="anonymous")
  
  body(class='theme-light')
    div(class='question-container')
      div(class='question-title')= question.title
      div(class='question-meta')
        div(class='question-meta-item')
          span Posted by #{question.userName}
        div(class='question-meta-item')
          span #{new Date(question.timestamp).toLocaleString()}
      div(class='question-content')!= question.rawHtml || question.text
      
      div(class='answers-section')
        div(class='answers-title') Answers
        div(class='answer-list')
          each answer in question.answers || []
            div(class=`answer-item ${answer.isAccepted ? 'accepted-answer' : ''}`)
              div(class='answer-meta')
                div(class='answer-author') #{answer.userName}
                div(class='answer-date') #{new Date(answer.timestamp).toLocaleString()}
                if question.userId === userId && !answer.isAccepted
                  button(class='accept-button' onclick=`acceptAnswer('${question.id}', '${answer.id}')`) Accept Answer
              div(class='answer-content')!= answer.text
        
        div(class='answer-form')
          textarea(
            class='answer-input'
            placeholder='Write your answer here...'
            id='answerText'
          )
          button(
            class='submit-button'
            onclick=`submitAnswer('${question.id}')`
          ) Submit Answer
    
    script.
      microsoftTeams.initialize();
      
      // Handle theme changes
      microsoftTeams.getContext((context) => {
        if (context && context.theme) {
          document.body.className = 'theme-' + context.theme;
        }
      });

      // Store user information from server
      const currentUserId = '#{userId}';
      const currentUserName = '#{userName}';
      
      async function submitAnswer(questionId) {
        const answerText = document.getElementById('answerText').value;
        if (!answerText.trim()) {
          alert('Please write an answer before submitting');
          return;
        }
        
        try {
          // Get Teams context first
          microsoftTeams.getContext(async (context) => {
            const response = await fetch(`/api/questions/${questionId}/answers`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'x-ms-client-principal-id': context.userObjectId,
                'x-ms-client-principal-name': context.userPrincipalName
              },
              body: JSON.stringify({
                text: answerText,
                timestamp: new Date().toISOString()
              })
            });
            
            if (!response.ok) throw new Error('Failed to submit answer');
            
            // Refresh the page to show the new answer
            window.location.reload();
          });
        } catch (error) {
          console.error('Error submitting answer:', error);
          alert('Failed to submit answer. Please try again.');
        }
      }
      
      async function acceptAnswer(questionId, answerId) {
        try {
          const response = await fetch(`/api/questions/${questionId}/answers/${answerId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              isAccepted: true
            })
          });
          
          if (!response.ok) throw new Error('Failed to accept answer');
          
          // Refresh the page to show the accepted answer
          window.location.reload();
        } catch (error) {
          console.error('Error accepting answer:', error);
          alert('Failed to accept answer. Please try again.');
        }
      } 