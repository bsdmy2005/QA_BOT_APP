doctype html
html(lang='en')
  head
    title Question Details
    
    // Load Teams JS
    script(src="https://unpkg.com/@microsoft/teams-js@1.3.7/dist/MicrosoftTeams.min.js" integrity="sha384-glExfvkpce98dO2oN+diZ/Luv/5qrZJiOvWCeR8ng/ZxlhpvBgHKeVFRURrh+NEC" crossorigin="anonymous")
    
    // Load TipTap via Skypack CDN
    script(type="module").
      import { Editor } from 'https://cdn.skypack.dev/@tiptap/core@2.1.7'
      import StarterKit from 'https://cdn.skypack.dev/@tiptap/starter-kit@2.1.7'
      import Image from 'https://cdn.skypack.dev/@tiptap/extension-image@2.1.7'
      import Link from 'https://cdn.skypack.dev/@tiptap/extension-link@2.1.7'

      window.setupTipTap = function() {
        console.log('Setting up TipTap...');
        const editorElement = document.querySelector('#editor-content');
        
        if (!editorElement) {
          console.error('Editor element not found!');
          return;
        }

        try {
          window.editor = new Editor({
            element: editorElement,
            extensions: [
              StarterKit.configure({
                bulletList: {
                  keepMarks: true,
                  HTMLAttributes: {
                    class: 'bullet-list',
                  },
                },
                orderedList: {
                  keepMarks: true,
                  HTMLAttributes: {
                    class: 'ordered-list',
                  },
                },
                listItem: {
                  HTMLAttributes: {
                    class: 'list-item',
                  },
                },
              }),
              Image,
              Link
            ],
            content: '<p>Type your answer here...</p>',
            editable: true,
            onCreate() {
              console.log('Editor created successfully');
              this.commands.focus('end');
              window.updateToolbarState();
            },
            onUpdate() {
              console.log('Content updated');
              window.updateToolbarState();
            },
            onSelectionUpdate() {
              window.updateToolbarState();
            }
          });

          // Initialize toolbar
          window.initializeToolbar();
          console.log('Editor initialization complete');
        } catch (error) {
          console.error('Error creating editor:', error);
        }
      }

    // Load styles
    link(rel='stylesheet', type='text/css', href='/styles/msteams-16.css')
    link(rel='stylesheet', type='text/css', href='/styles/custom.css')
    link(rel='stylesheet', href='https://fonts.googleapis.com/icon?family=Material+Icons')
    style.
      :root {
        --primary-blue: #0078D4;
        --light-blue: #E5F1FB;
        --white: #FFFFFF;
        --gray-100: #F3F4F6;
        --gray-200: #E5E7EB;
        --gray-700: #374151;
        --success-green: #4CAF50;
      }
      
      body {
        margin: 0;
        padding: 24px;
        background-color: var(--white);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      }
      
      .surface {
        background: var(--white);
        border-radius: 8px;
        width: 100%;
        height: 100%;
      }
      
      .panel {
        padding: 24px;
      }
      
      .question-container {
        display: flex;
        flex-direction: column;
        gap: 16px;
      }
      
      .question-title {
        font-size: 24px;
        font-weight: 600;
        color: #242729;
        margin: 0;
      }
      
      .question-meta {
        display: flex;
        gap: 16px;
        color: var(--gray-700);
        font-size: 14px;
      }
      
      .question-meta-item {
        display: flex;
        align-items: center;
        gap: 4px;
      }
      
      .question-content {
        font-size: 16px;
        line-height: 1.6;
        color: #242729;
      }
      
      .question-content p {
        margin: 0 0 16px 0;
      }
      
      .question-content img, .answer-content img {
        max-width: 300px;
        max-height: 200px;
        height: auto;
        border-radius: 4px;
        margin: 8px 0;
        cursor: zoom-in;
        transition: transform 0.2s ease;
        object-fit: cover;
        display: block;
      }
      
      .question-content img:hover, .answer-content img:hover {
        transform: scale(1.02);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }
      
      .answers-section {
        border-top: 1px solid var(--gray-200);
        padding-top: 16px;
        margin-top: 16px;
      }
      
      .answers-title {
        font-size: 18px;
        font-weight: 500;
        color: #242729;
        margin-bottom: 16px;
      }
      
      .answer-list {
        display: flex;
        flex-direction: column;
        gap: 16px;
      }
      
      .answer-item {
        background: var(--white);
        border: 1px solid var(--gray-200);
        border-radius: 8px;
        padding: 16px;
        transition: all 0.2s ease;
      }
      
      .answer-item:hover {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transform: translateY(-1px);
      }
      
      .answer-item.accepted-answer {
        background: #f1f8e9;
        border: 1px solid #a5d6a7;
      }
      
      .answer-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
        padding-bottom: 8px;
        border-bottom: 1px solid var(--gray-200);
      }
      
      .answer-author-info {
        display: flex;
        flex-direction: column;
      }
      
      .answer-author {
        font-weight: 500;
        font-size: 14px;
      }
      
      .answer-date {
        color: var(--gray-700);
        font-size: 14px;
      }
      
      .accept-button {
        background: var(--success-green);
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 13px;
        font-weight: 500;
        transition: all 0.2s ease;
        display: inline-flex;
        align-items: center;
        gap: 4px;
      }
      
      .accept-button i {
        font-size: 16px;
      }
      
      .accept-button:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        background: #43a047;
      }
      
      .accepted-answer .answer-meta {
        border-color: #a5d6a7;
      }
      
      .accepted-answer-label {
        display: inline-flex;
        align-items: center;
        gap: 4px;
        color: var(--success-green);
        font-weight: 500;
        font-size: 14px;
      }
      
      .accepted-answer-label i {
        font-size: 16px;
      }
      
      .answer-content {
        color: #242729;
        line-height: 1.5;
        font-size: 14px;
      }
      
      .answer-form {
        margin-top: 24px;
      }
      
      #editor-container {
        border: 1px solid var(--gray-200);
        border-radius: 8px;
        background: white;
        margin-bottom: 16px;
      }
      
      .editor-toolbar {
        padding: 8px;
        border-bottom: 1px solid var(--gray-200);
        background: #fafbfc;
        display: flex;
        gap: 4px;
        flex-wrap: wrap;
      }
      
      .toolbar-button {
        padding: 6px;
        background: var(--white);
        border: 1px solid var(--gray-200);
        border-radius: 4px;
        cursor: pointer;
        font-size: 20px;
        min-width: 32px;
        height: 32px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--gray-700);
        transition: all 0.2s ease;
      }
      
      .toolbar-button:hover {
        background: var(--light-blue);
        border-color: var(--primary-blue);
        color: var(--primary-blue);
      }
      
      .toolbar-button.is-active {
        background: var(--primary-blue);
        border-color: var(--primary-blue);
        color: var(--white);
      }
      
      .toolbar-button i {
        font-size: 20px;
      }
      
      #editor-content {
        min-height: 200px;
        padding: 16px;
      }
      
      .ProseMirror {
        outline: none;
      }
      
      .ProseMirror p {
        margin: 0 0 8px 0;
      }
      
      .ProseMirror img {
        max-width: 100%;
        height: auto;
      }
      
      .button-primary {
        background: var(--primary-blue);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
      }
      
      .button-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      
      // Modal styles
      .image-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.85);
        z-index: 99999;
      }

      .image-modal.active {
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .image-modal .modal-content {
        position: relative;
        max-width: 90%;
        max-height: 90vh;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .image-modal img {
        max-width: 100%;
        max-height: 85vh;
        object-fit: contain;
        border-radius: 4px;
        box-shadow: 0 4px 24px rgba(0, 0, 0, 0.2);
        display: block;
      }

      .image-modal .close-button {
        position: absolute;
        top: -40px;
        right: 0;
        background: white;
        border: none;
        color: #333;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        cursor: pointer;
        display: none;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        z-index: 100000;
      }

      .image-modal.active .close-button {
        display: flex;
      }

      .image-modal .close-button:hover {
        transform: scale(1.1);
        background: #f0f0f0;
      }

      .image-modal .close-button i {
        font-size: 20px;
      }

      .image-thumbnail-container {
        display: inline-block;
        margin: 4px;
        position: relative;
      }

      .image-thumbnail-container::after {
        content: '🔍';
        position: absolute;
        bottom: 8px;
        right: 8px;
        background: rgba(255, 255, 255, 0.9);
        padding: 4px;
        border-radius: 4px;
        font-size: 12px;
        opacity: 0;
        transition: opacity 0.2s ease;
      }

      .image-thumbnail-container:hover::after {
        opacity: 1;
      }
      
  body(class='theme-light')
    div.surface
      div.panel
        div.question-container
          div.question-title= question.title
          div.question-meta
            div.question-meta-item
              span Posted by #{question.userName}
            div.question-meta-item
              span #{new Date(question.timestamp).toLocaleString()}
          div.question-content!= question.rawHtml || question.text
          
          div.answers-section
            div.answers-title Answers
            div.answer-list
              each answer in question.answers || []
                div(class=`answer-item ${answer.isAccepted ? 'accepted-answer' : ''}` data-answer-id=answer.id)
                  div.answer-meta
                    div.answer-author-info
                      span.answer-author= answer.userName
                      span.answer-date= new Date(answer.timestamp).toLocaleString()
                    if answer.isAccepted
                      .accepted-answer-label
                        i.material-icons check_circle
                        | Accepted Answer
                  div.answer-content!= answer.text
            
            div.answer-form
              div#editor-container
                div.editor-toolbar
                  button.toolbar-button(type='button', data-action='bold')
                    i.material-icons format_bold
                  button.toolbar-button(type='button', data-action='italic')
                    i.material-icons format_italic
                  button.toolbar-button(type='button', data-action='bullet-list')
                    i.material-icons format_list_bulleted
                  button.toolbar-button(type='button', data-action='ordered-list')
                    i.material-icons format_list_numbered
                  button.toolbar-button(type='button', data-action='image')
                    i.material-icons image
                div#editor-content
              button.button-primary(onclick=`submitAnswer('${question.id}')`) Submit Answer

    // Modal markup
    div.image-modal#imageModal
      div.modal-content
        button.close-button(type="button" onclick="closeImageModal()")
          i.material-icons close
        img#modalImage

    script.
      // Initialize Teams
      microsoftTeams.initialize();
      
      // Get Teams context and update UI accordingly
      microsoftTeams.getContext((context) => {
        console.log('Teams context:', context);
        if (context && context.userObjectId) {
          // Update the UI based on question ownership
          const questionUserId = '#{question.userId}';
          const isOwner = questionUserId === context.userObjectId;
          console.log('Ownership check:', { questionUserId, currentUserId: context.userObjectId, isOwner });
          
          // Update accept buttons visibility
          document.querySelectorAll('.answer-item').forEach(item => {
            const isAccepted = item.classList.contains('accepted-answer');
            const answerId = item.getAttribute('data-answer-id');
            const answerMeta = item.querySelector('.answer-meta');
            
            if (isOwner && !isAccepted) {
              const acceptButton = document.createElement('button');
              acceptButton.className = 'accept-button';
              acceptButton.onclick = () => acceptAnswer('#{question.id}', answerId);
              acceptButton.innerHTML = '<i class="material-icons">check_circle_outline</i>Accept Answer';
              answerMeta.appendChild(acceptButton);
            }
          });
        }
      });

      // Initialize editor when DOM is loaded
      document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded, initializing...');
        // Initialize TipTap editor
        window.setupTipTap();
        // Initialize image modal
        setupImageModal();
      });

      // Handle theme changes
      microsoftTeams.getContext((context) => {
        if (context && context.theme) {
          document.body.className = 'theme-' + context.theme;
        }
      });

      // Make functions available globally
      window.updateToolbarState = function() {
        if (!window.editor) return;

        const toolbar = document.querySelector('.editor-toolbar');
        
        // Update button states based on current editor state
        toolbar.querySelector('[data-action="bold"]').classList.toggle('is-active', window.editor.isActive('bold'));
        toolbar.querySelector('[data-action="italic"]').classList.toggle('is-active', window.editor.isActive('italic'));
        toolbar.querySelector('[data-action="bullet-list"]').classList.toggle('is-active', window.editor.isActive('bulletList'));
        toolbar.querySelector('[data-action="ordered-list"]').classList.toggle('is-active', window.editor.isActive('orderedList'));
      }

      window.initializeToolbar = function() {
        console.log('Initializing toolbar');
        const toolbar = document.querySelector('.editor-toolbar');
        
        // Text formatting buttons
        toolbar.querySelector('[data-action="bold"]').addEventListener('click', () => {
          console.log('Bold button clicked');
          window.editor.chain().focus().toggleBold().run();
          window.updateToolbarState();
        });
        
        toolbar.querySelector('[data-action="italic"]').addEventListener('click', () => {
          console.log('Italic button clicked');
          window.editor.chain().focus().toggleItalic().run();
          window.updateToolbarState();
        });
        
        toolbar.querySelector('[data-action="bullet-list"]').addEventListener('click', () => {
          console.log('Bullet list button clicked');
          window.editor.chain().focus().toggleBulletList().run();
          window.updateToolbarState();
        });
        
        toolbar.querySelector('[data-action="ordered-list"]').addEventListener('click', () => {
          console.log('Ordered list button clicked');
          window.editor.chain().focus().toggleOrderedList().run();
          window.updateToolbarState();
        });

        // Image button
        toolbar.querySelector('[data-action="image"]').addEventListener('click', handleImageUpload);
      }

      async function submitAnswer(questionId) {
        if (!window.editor) {
          alert("Editor is not initialized. Please try again.");
          return;
        }

        const answerContent = window.editor.getHTML();
        
        if (window.editor.isEmpty) {
          alert("Please enter your answer");
          return;
        }

        try {
          // Get Teams context first
          microsoftTeams.getContext(async (context) => {
            const response = await fetch(`/api/questions/${questionId}/answers`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'x-ms-client-principal-id': context.userObjectId,
                'x-ms-client-principal-name': context.userPrincipalName
              },
              body: JSON.stringify({
                text: answerContent,
                userId: context.userObjectId,
                userName: context.userPrincipalName || context.upn || "Anonymous User",
                timestamp: new Date().toISOString()
              })
            });

            if (!response.ok) {
              throw new Error('Failed to submit answer');
            }

            const data = await response.json();

            // Get updated question data with all answers
            const questionResponse = await fetch(`/api/questions/${questionId}`);
            const questionData = await questionResponse.json();

            // Update the answers list in the UI immediately
            const answerList = document.querySelector('.answer-list');
            answerList.innerHTML = questionData.answers.map(answer => `
              <div class="answer-item ${answer.isAccepted ? 'accepted-answer' : ''}">
                <div class="answer-meta">
                  <div class="answer-author-info">
                    <span class="answer-author">${answer.userName}</span>
                    <span class="answer-date">${new Date(answer.timestamp).toLocaleString()}</span>
                  </div>
                  ${answer.isAccepted ? 
                    `<div class="accepted-answer-label">
                      <i class="material-icons">check_circle</i>
                      Accepted Answer
                    </div>` :
                    (questionData.userId === context.userObjectId && !questionData.answers.some(a => a.isAccepted) ? 
                      `<button class="accept-button" onclick="acceptAnswer('${questionId}', '${answer.id}')">
                        <i class="material-icons">check_circle_outline</i>
                        Accept Answer
                      </button>` : 
                      '')}
                </div>
                <div class="answer-content">${answer.text}</div>
              </div>
            `).join('');

            // Scroll to the new answer
            const newAnswer = answerList.lastElementChild;
            if (newAnswer) {
              newAnswer.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }

            // Reinitialize image modal functionality for new content
            setupImageModal();

            // Clear the editor
            window.editor.commands.clearContent();

            // Submit answer and close the task module
            microsoftTeams.tasks.submitTask({
              type: "answer_submitted",
              data: {
                question: questionData,
                answers: questionData.answers
              }
            });
          });
        } catch (error) {
          console.error('Error submitting answer:', error);
          alert('Failed to submit answer. Please try again.');
        }
      }

      async function acceptAnswer(questionId, answerId) {
        console.log('Accepting answer:', { questionId, answerId });
        try {
          microsoftTeams.getContext(async (context) => {
            console.log('Teams context for accept:', context);
            const response = await fetch(`/api/questions/${questionId}/answers/${answerId}/accept`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'x-ms-client-principal-id': context.userObjectId || 'anonymous',
                'x-ms-client-principal-name': context.userPrincipalName || 'Anonymous User'
              }
            });

            if (!response.ok) {
              const errorData = await response.json();
              console.error('Error accepting answer:', errorData);
              throw new Error(errorData.error || 'Failed to accept answer');
            }

            // Get updated question data
            const questionResponse = await fetch(`/api/questions/${questionId}`);
            if (!questionResponse.ok) {
              throw new Error('Failed to get updated question data');
            }

            const questionData = await questionResponse.json();
            console.log('Updated question data:', questionData);

            // Update the answers list in the UI
            const answerList = document.querySelector('.answer-list');
            answerList.innerHTML = questionData.answers.map(answer => `
              <div class="answer-item ${answer.isAccepted ? 'accepted-answer' : ''}" data-answer-id="${answer.id}">
                <div class="answer-meta">
                  <div class="answer-author-info">
                    <span class="answer-author">${answer.userName}</span>
                    <span class="answer-date">${new Date(answer.timestamp).toLocaleString()}</span>
                  </div>
                  ${answer.isAccepted ? 
                    `<div class="accepted-answer-label">
                      <i class="material-icons">check_circle</i>
                      Accepted Answer
                    </div>` : ''}
                </div>
                <div class="answer-content">${answer.text}</div>
              </div>
            `).join('');

            // Submit task to update the card in Teams
            microsoftTeams.tasks.submitTask({
              type: "answer_accepted",
              data: {
                question: questionData,
                answers: questionData.answers
              }
            });
          });
        } catch (error) {
          console.error('Error accepting answer:', error);
          alert('Failed to accept answer. Please try again.');
        }
      }

      // Add handler for task module submit
      microsoftTeams.tasks.registerOnSubmit((result) => {
        // The task module will be closed automatically after submitTask
        console.log('Task module submit handler called:', result);
      });

      // Handle image upload
      async function handleImageUpload() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        
        input.onchange = async () => {
          const file = input.files[0];
          if (!file) return;
          
          if (file.size > 5000000) {
            alert("Image is too large. Please use an image under 5MB.");
            return;
          }

          const formData = new FormData();
          formData.append('image', file);

          try {
            const response = await fetch('/api/upload-image', {
              method: 'POST',
              body: formData
            });

            if (!response.ok) {
              throw new Error('Upload failed');
            }

            const data = await response.json();
            window.editor.chain().focus().setImage({ src: data.url }).run();
          } catch (error) {
            console.error('Error uploading image:', error);
            alert('Failed to upload image. Please try again.');
          }
        };

        input.click();
      }

      // Simplified image modal functionality
      function setupImageModal() {
        console.log('Setting up image modal...');
        // Add click handlers to all images in question and answer content
        document.querySelectorAll('.question-content img, .answer-content img').forEach((img) => {
          console.log('Found image:', img.src);
          img.style.cursor = 'zoom-in';
          
          img.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('Image clicked:', this.src);
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('modalImage');
            modalImg.src = this.src;
            modal.classList.add('active');
          });
        });

        // Add click handler to close modal when clicking outside
        const modal = document.getElementById('imageModal');
        modal.addEventListener('click', function(e) {
          if (e.target === this) {
            closeImageModal();
          }
        });

        // Add keyboard navigation for escape key
        document.addEventListener('keydown', function(e) {
          if (e.key === 'Escape') {
            closeImageModal();
          }
        });
      }

      function closeImageModal() {
        console.log('Closing modal...');
        const modal = document.getElementById('imageModal');
        const modalImg = document.getElementById('modalImage');
        if (modal) {
          modal.classList.remove('active');
          // Clear the image source after animation
          setTimeout(() => {
            modalImg.src = '';
          }, 200);
        }
      } 