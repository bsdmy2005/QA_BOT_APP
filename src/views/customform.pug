//- Copyright (c) Microsoft Corporation
//- All rights reserved.
//-
//- MIT License:
//- Permission is hereby granted, free of charge, to any person obtaining
//- a copy of this software and associated documentation files (the
//- "Software"), to deal in the Software without restriction, including
//- without limitation the rights to use, copy, modify, merge, publish,
//- distribute, sublicense, and/or sell copies of the Software, and to
//- permit persons to whom the Software is furnished to do so, subject to
//- the following conditions:
//-
//- The above copyright notice and this permission notice shall be
//- included in all copies or substantial portions of the Software.
//-
//- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
//- NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
//- LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//- OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
//- WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//-
//-

doctype html
html(lang='en')
  head
    style.
      :root {
        --primary-blue: #0078D4;
        --light-blue: #E5F1FB;
        --white: #FFFFFF;
        --gray-100: #F3F4F6;
        --gray-200: #E5E7EB;
        --gray-700: #374151;
      }
      
      body {
        margin: 0;
        padding: 10px;
        background-color: var(--white);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      }
      
      .surface {
        background: var(--white);
        border-radius: 8px;
      }
      
      .panel {
        padding: 10px;
      }
      
      .question-form {
        margin-bottom: 10px;
      }
      
      .form-field {
        margin-bottom: 10px;
      }
      
      .form-field label {
        display: block;
        margin-bottom: 4px;
        font-weight: 500;
        color: var(--gray-700);
        font-size: 14px;
      }
      
      .form-field input {
        width: 100%;
        padding: 8px 12px;
        border: 2px solid var(--gray-200);
        border-radius: 6px;
        font-size: 14px;
        transition: all 0.2s ease;
        height: 36px;
      }
      
      .form-field input:focus {
        outline: none;
        border-color: var(--primary-blue);
        box-shadow: 0 0 0 3px var(--light-blue);
      }
      
      #editor-container {
        height: 320px;
        margin-bottom: 10px;
        border: 2px solid var(--gray-200);
        border-radius: 6px;
      }
      
      .ql-toolbar {
        border-top-left-radius: 6px !important;
        border-top-right-radius: 6px !important;
        border: none !important;
        border-bottom: 1px solid var(--gray-200) !important;
        background-color: var(--gray-100);
      }
      
      .ql-container {
        border: none !important;
        font-size: 16px !important;
      }
      
      .button-primary {
        background-color: var(--primary-blue);
        color: var(--white);
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        width: 100%;
        height: 40px;
      }
      
      .button-primary:hover {
        background-color: #006CBE;
        transform: translateY(-1px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      
      .button-primary:active {
        transform: translateY(0);
        box-shadow: none;
      }
      
    title Microsoft Teams Task Module - Q&A Form
    link(rel='stylesheet', type='text/css', href='/styles/msteams-16.css')
    link(rel='stylesheet', type='text/css', href='/styles/custom.css')
    script(src="https://unpkg.com/@microsoft/teams-js@1.3.7/dist/MicrosoftTeams.min.js" integrity="sha384-glExfvkpce98dO2oN+diZ/Luv/5qrZJiOvWCeR8ng/ZxlhpvBgHKeVFRURrh+NEC" crossorigin="anonymous")
    script(src="https://cdn.quilljs.com/1.3.6/quill.min.js")
    link(href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet")
  body(class='theme-light')
    script.
      microsoftTeams.initialize();
      
      // Handle the Esc key
      document.onkeyup = function(event) {
        if ((event.key === 27) || (event.key === "Escape")) {
          microsoftTeams.tasks.submitTask(null);
        }
      }
      
      // Get current Teams theme and set it
      let currentTheme = "";
      let queryParameters = getQueryParameters();
      if (queryParameters["theme"] === undefined) {
        microsoftTeams.getContext(function(context) {
          if (context && context.theme) {
            setTheme(context.theme);
          }
        });
      } else {
        setTheme(queryParameters["theme"]);
      }

      let quill;
      
      // Initialize Quill editor when the document is ready
      document.addEventListener('DOMContentLoaded', function() {
        const toolbarOptions = [
          ['bold', 'italic', 'underline', 'strike'],
          ['blockquote', 'code-block'],
          [{ 'header': 1 }, { 'header': 2 }],
          [{ 'list': 'ordered'}, { 'list': 'bullet' }],
          [{ 'script': 'sub'}, { 'script': 'super' }],
          ['link', 'image'],
          ['clean']
        ];

        quill = new Quill('#editor-container', {
          modules: {
            toolbar: toolbarOptions,
            clipboard: {
              matchVisual: false // Prevent paste issues
            }
          },
          placeholder: 'Provide more details about your question...',
          theme: 'snow',
          bounds: '#editor-container'
        });

        // Handle image upload
        const toolbar = quill.getModule('toolbar');
        toolbar.addHandler('image', () => {
          const input = document.createElement('input');
          input.setAttribute('type', 'file');
          input.setAttribute('accept', 'image/*');
          input.click();

          input.onchange = async () => {
            const file = input.files[0];
            if (file) {
              if (file.size > 5000000) { // 5MB limit
                alert("Image is too large. Please use an image under 5MB.");
                return;
              }

              // Create FormData
              const formData = new FormData();
              formData.append('image', file);

              try {
                // Upload to server
                const response = await fetch('/api/upload-image', {
                  method: 'POST',
                  body: formData
                });

                if (!response.ok) {
                  throw new Error('Upload failed');
                }

                const data = await response.json();
                
                // Insert the image URL into the editor
                const range = quill.getSelection(true);
                quill.insertEmbed(range.index, 'image', data.url);
              } catch (error) {
                console.error('Error uploading image:', error);
                alert('Failed to upload image. Please try again.');
              }
            }
          };
        });
      });

      function validateForm() {
        microsoftTeams.getContext(function(context) {
          // Get the Quill editor content
          const editorContent = quill.root.innerHTML;
          
          // Check content size
          if (editorContent.length > 1000000) { // 1MB limit
            alert("Your question content is too large. Please reduce the size of any images.");
            return false;
          }

          // Check if title is empty
          const title = document.forms["questionForm"]["title"].value.trim();
          if (!title) {
            alert("Please enter a question title");
            return false;
          }

          // Check if content is empty
          if (quill.getText().trim().length === 0) {
            alert("Please enter question details");
            return false;
          }

          const questionData = {
            title: title,
            text: editorContent,
            userId: context.userObjectId,
            userName: context.userPrincipalName || context.upn || "Anonymous User",
            timestamp: new Date().toISOString(),
            answers: [],
            id: generateId(6)
          };

          // Log the data being submitted
          console.log("Submitting question data:", questionData);

          // Submit the data without callback (simpler approach)
          microsoftTeams.tasks.submitTask(questionData);
          
          return false; // Prevent form submission
        });
        return false; // Prevent form submission
      }

      // Add form validation on submit button click
      document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('questionForm');
        const submitButton = form.querySelector('button[type="submit"]');
        
        submitButton.addEventListener('click', function(e) {
          e.preventDefault();
          validateForm();
        });
      });

      function getQueryParameters() {
        let queryParams = {};
        location.search.substr(1).split("&").forEach(function(item) {
          let s = item.split("="),
          k = s[0],
          v = s[1] && decodeURIComponent(s[1]);
          queryParams[k] = v;
        });
        return queryParams;
      }

      function generateId(length) {
        const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
        let result = '';
        for (let i = 0; i < length; i++) {
          result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
      }

      function setTheme(theme) {
        if (theme) {
          document.body.className = 'theme-' + (theme === 'default' ? 'light' : theme);
        }
      }

    div(class='surface')
      div(class='panel')
        form(method='POST' id="questionForm" onSubmit="return validateForm()")
          div(class="question-form")
            div(class="form-field")
              label(for='title') Question Title
              input#title(type='text', name='title', required, placeholder='What would you like to ask?')
            div(class="form-field")
              label(for='text') Question Details
              div#editor-container
            button.button-primary(type='submit') Submit Question
